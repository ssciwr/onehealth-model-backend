[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "heiplanet-models"
license = {text = "MIT License"}
license-files = ["LICEN[CS]E*"]
readme = "README.md"
description = "Model backend for the HeiPlanet project"
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
authors = [
  { name="Scientific Software Center", email="ssc@uni-heidelberg.de" },
]
dynamic = ["version"]

dependencies = [
  "xarray[parallel]",
  "rioxarray",
  "netcdf4",
  "geopandas[all]", 
  "matplotlib", 
  "numpy", 
  "dask",
]

[project.optional-dependencies]
viz = [
    "graphviz",
]
dev = [
    "pre-commit",
    "pytest",
    "pytest-cov",
    "graphviz", # we need this for the viz tests
]

[project.urls]
Homepage = "https://github.com/ssciwr/onehealth-model-backend"
Issues = "https://github.com/ssciwr/onehealth-model-backend/issues"

# tool-specific configurations
[tool.hatch.build.targets.wheel]
packages = ["src/heiplanet_models"]


[tool.hatch.version]
source = "vcs"
tag-pattern = "v(?P<version>.+)"

# test config 

[tool.coverage.run]
branch = true
source = ["./src/heiplanet_models"]
omit = [
    "src/heiplanet_models/__init__.py",
    "src/heiplanet_models/*/__init__.py"
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

fail_under = 80